diff --git a/node_modules/@deadcanaries/granax/index.js b/node_modules/@deadcanaries/granax/index.js
index fab3630..aaace2f 100644
--- a/node_modules/@deadcanaries/granax/index.js
+++ b/node_modules/@deadcanaries/granax/index.js
@@ -14,7 +14,7 @@ const { readFileSync } = require('fs');
 
 const BIN_PATH = path.join(__dirname, 'bin');
 const LD_LIBRARY_PATH = path.join(
-  BIN_PATH, 'tor-browser_en-US', 'Browser', 'TorBrowser', 'Tor'
+  BIN_PATH, 'tor-browser', 'Browser', 'TorBrowser', 'Tor'
 );
 
 
@@ -114,7 +114,7 @@ module.exports.tor = function(platform) {
       break;
     case 'darwin':
       torpath = path.join(BIN_PATH, '.tbb.app', 'Contents', 'MacOS', 'Tor',
-        'tor.real');
+        'tor');
       break;
     case 'android':
     case 'linux':
diff --git a/node_modules/@deadcanaries/granax/script/download-tbb.js b/node_modules/@deadcanaries/granax/script/download-tbb.js
index edd3ca0..c3d7460 100644
--- a/node_modules/@deadcanaries/granax/script/download-tbb.js
+++ b/node_modules/@deadcanaries/granax/script/download-tbb.js
@@ -33,17 +33,18 @@ exports.getTorBrowserLink = function(platform, version, callback) {
 
   function createHref(v) {
     const link = `https://dist.torproject.org/torbrowser/${v}`;
-
+    // see https://dist.torproject.org/torbrowser/12.5.1/
     switch (platform) {
       case 'win32':
-        return `${link}/torbrowser-install-${v}_en-US.exe`;
+        return `${link}/torbrowser-install-${v}_ALL.exe`;
       case 'darwin':
-        return `${link}/TorBrowser-${v}-osx64_en-US.dmg`;
+        return `${link}/TorBrowser-${v}-macos_ALL.dmg`;
       case 'android':
       case 'linux':
+// [   ] tor-browser-linux64-12.5.1_ALL.tar.xz                        2023-07-03 15:41  108M  
         return os.arch() === 'x64'
-          ? `${link}/tor-browser-linux64-${v}_en-US.tar.xz`
-          : `${link}/tor-browser-linux32-${v}_en-US.tar.xz`
+          ? `${link}/tor-browser-linux64-${v}_ALL.tar.xz`
+          : `${link}/tor-browser-linux32-${v}_ALL.tar.xz`
       default:
         throw new Error(`Unsupported platform "${platform}"`);
     }
@@ -136,9 +137,28 @@ exports._unpackMacintosh = function(bundle, callback) {
     path.join(BIN_DIR, '.tbb.dmg')
   ], { cwd: BIN_DIR });
 
+  const finalback = (err, value) => {
+    const extract = childProcess.spawn('hdiutil', [
+      'detach',
+      path.join(BIN_DIR, '.tbb')
+    ], { cwd: BIN_DIR });
+
+    extract.on('close', (code) => {
+      if (code < 0) {
+        const unpackErr = new Error('Failed to unpack bundle');
+        if (err) {
+          unpackErr = new AggregateError([unpackErr, err], 'Multiple errors attempting to unpack Tor');
+        }
+        return callback(unpackErr);
+      }
+
+      callback(null, value);
+    });
+  };
+
   mounter.on('close', (code) => {
     if (code < 0) {
-      return callback(new Error('Failed to unpack bundle'));
+      return finalback(new Error('Failed to unpack bundle'));
     }
 
     ncp.ncp(
@@ -146,21 +166,10 @@ exports._unpackMacintosh = function(bundle, callback) {
       path.join(BIN_DIR, '.tbb.app'),
       (err) => {
         if (err) {
-          return callback(new Error('Failed to unpack bundle'));
+          return finalback(new Error('Failed to unpack bundle'));
         }
 
-        const extract = childProcess.spawn('hdiutil', [
-          'detach',
-          path.join(BIN_DIR, '.tbb')
-        ], { cwd: BIN_DIR });
-
-        extract.on('close', (code) => {
-          if (code < 0) {
-            callback(new Error('Failed to unpack bundle'));
-          }
-
-          callback(null, getTorPath('darwin'));
-        });
+        finalback(null, getTorPath('darwin'));
       }
     );
   });
@@ -242,7 +251,9 @@ exports.install = function(callback) {
           const source = path.dirname(granax.tor(os.platform()));
           const dest = path.join(BIN_DIR, 'Tor');
 
-          console.log(`Moving tor binary and libs to ${dest}...`);
+          console.log(`Moving tor binary and libs from ${JSON.stringify(source)} to ${JSON.stringify(dest)}...`);
+          // Just in case a prior exists:
+          rimraf.sync(dest);
           mv(source, dest, (err) => {
             if (err) {
               return callback(err);
@@ -261,7 +272,7 @@ exports.install = function(callback) {
                 break;
               case 'android':
               case 'linux':
-                rimraf.sync(path.join(BIN_DIR, 'tor-browser_en-US'));
+                rimraf.sync(path.join(BIN_DIR, 'tor-browser'));
                 break;
               default:
             }
